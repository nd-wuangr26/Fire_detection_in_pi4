#include "esp_camera.h"
#include <WiFi.h>
#include <base64.h>
#include <PubSubClient.h>  // Th∆∞ vi·ªán MQTT

#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"

// WiFi credentials
const char* ssid = "sometime";
const char* password = "zxcvbnmm";

// MQTT broker details
const char* mqtt_server = "192.168.1.74";
const int mqtt_port = 1883;
const char* mqtt_topic = "img"; // Ch·ªß ƒë·ªÅ ƒë·ªÉ g·ª≠i ·∫£nh

WiFiClient espClient;
PubSubClient client(espClient);

void connectToWiFi() {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected!");
}

void reconnectMQTT() {
  while (!client.connected()) {
    if (client.connect("ESP32Client")) {
      Serial.println("‚úÖ Connected to MQTT Broker!");
    } else {
      Serial.print("‚ùå Failed to connect to MQTT. Retrying...");
      delay(5000);
    }
  }
}

void setupCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_QVGA;  // Gi·ªØ nguy√™n ƒë·ªô ph√¢n gi·∫£i
  config.pixel_format = PIXFORMAT_JPEG;
  config.fb_location = CAMERA_FB_IN_PSRAM; // N·∫øu v·∫´n l·ªói, th·ª≠ ƒë·ªïi sang CAMERA_FB_IN_DRAM
  config.jpeg_quality = 10;  // Gi·∫£m nh·∫π ch·∫•t l∆∞·ª£ng ·∫£nh (gi√° tr·ªã th·∫•p h∆°n = ·∫£nh ƒë·∫πp h∆°n)
  config.fb_count = 2;  // D√πng 2 buffer ƒë·ªÉ gi·∫£m l·ªói b·ªô nh·ªõ

  if (esp_camera_init(&config) != ESP_OK) {
    Serial.println("‚ùå Camera init failed!");
    return;
  }
  Serial.println("‚úÖ Camera ready!");
}

void sendEncodedImage() {
  camera_fb_t* fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("‚ùå Camera capture failed!");
    return;
  }

  Serial.println("üì∏ ·∫¢nh ch·ª•p th√†nh c√¥ng, b·∫Øt ƒë·∫ßu m√£ h√≥a...");

  // M√£ h√≥a ·∫£nh th√†nh Base64
  String encodedImage = base64::encode(fb->buf, fb->len);

  // Chia nh·ªè ·∫£nh ƒë·ªÉ g·ª≠i qua MQTT
  int partSize = 200; // K√≠ch th∆∞·ªõc m·ªói ph·∫ßn (c√≥ th·ªÉ gi·∫£m n·∫øu l·ªói)
  int totalParts = (encodedImage.length() + partSize - 1) / partSize;

  Serial.printf("üì§ G·ª≠i ·∫£nh (%d ph·∫ßn)...\n", totalParts);

  for (int i = 0; i < totalParts; i++) {
    String part = encodedImage.substring(i * partSize, (i + 1) * partSize);
    String message = String(i + 1) + "/" + String(totalParts) + ":" + part;
    
    if (!client.publish(mqtt_topic, message.c_str())) {
      Serial.println("‚ö†Ô∏è L·ªói g·ª≠i MQTT, th·ª≠ l·∫°i...");
      delay(500);
      client.publish(mqtt_topic, message.c_str());
    }
    
    delay(50);  // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ tr√°nh ngh·∫Ωn m·∫°ng
  }

  // G·ª≠i th√¥ng b√°o k·∫øt th√∫c
  if (client.publish(mqtt_topic, "end")) {
    Serial.println("‚úÖ ·∫¢nh g·ª≠i ho√†n t·∫•t!");
  } else {
    Serial.println("‚ö†Ô∏è L·ªói g·ª≠i tin 'end'");
  }

  esp_camera_fb_return(fb);
}


void setup() {
  Serial.begin(115200);

  connectToWiFi(); // K·∫øt n·ªëi Wi-Fi
  client.setServer(mqtt_server, mqtt_port); // C·∫•u h√¨nh MQTT
  reconnectMQTT(); // K·∫øt n·ªëi v·ªõi broker MQTT

  setupCamera(); // Kh·ªüi t·∫°o camera
}

void loop() {
  if (!client.connected()) {
    reconnectMQTT(); // Ki·ªÉm tra v√† k·∫øt n·ªëi l·∫°i MQTT n·∫øu m·∫•t k·∫øt n·ªëi
  }
  client.loop(); // X·ª≠ l√Ω c√°c tin nh·∫Øn MQTT

  // Capture and encode image periodically
  sendEncodedImage();
  delay(5000); // Gi·∫£m th·ªùi gian g·ª≠i ·∫£nh xu·ªëng 3 gi√¢y
}
