import base64
import cv2
import numpy as np
import paho.mqtt.client as mqtt
import mysql.connector
import time
import requests
import torch
from flask import Flask, render_template, Response, jsonify
from datetime import datetime
from ultralytics import YOLO
from PIL import Image
from io import BytesIO
#  Kh·ªüi t·∫°o Flask Web Server
app = Flask(__name__)

# üîß C·∫•u h√¨nh MQTT
MQTT_BROKER = "192.168.1.41"
MQTT_PORT = 1883
MQTT_TOPIC = "img"

# C·∫•u h√¨nh telegram
TELEGRAM_TOKEN = "7750866421:AAGCAGA7m-hrWY3kehasDoboy51NEtb0EQo"
TELEGRAM_CHAT_ID = "-4764219942"

#  K·∫øt n·ªëi MySQL
db = mysql.connector.connect(
    host="localhost",
    user="root",  #  Thay b·∫±ng user MySQL c·ªßa b·∫°n
    password="123",  #  Thay b·∫±ng m·∫≠t kh·∫©u MySQL
    database="fire_detection"
)
cursor = db.cursor()

#  Load m√¥ h√¨nh YOLOv8 nh·∫≠n di·ªán ƒë√°m ch√°y
model = YOLO('/nhan_dang/model/best.pt')
model.eval()

#  Bi·∫øn to√†n c·ª•c l∆∞u ·∫£nh t·ª´ MQTT
image_data = {}
total_parts = None
latest_image = None


#  H√†m t·ª± ƒë·ªông s·ª≠a l·ªói thi·∫øu padding Base64
def fix_base64_padding(base64_string):
    missing_padding = len(base64_string) % 4
    if missing_padding:
        base64_string += "=" * (4 - missing_padding)
    return base64_string


#  H√†m nh·∫≠n di·ªán ƒë√°m ch√°y b·∫±ng YOLOv8
def detect_fire(image):
    """Nh·∫≠n di·ªán ƒë√°m ch√°y v·ªõi YOLOv8"""
    global latest_image

    results = model(image)  # Nh·∫≠n di·ªán ·∫£nh

    #  V·∫Ω bounding box l√™n ·∫£nh
    for result in results:
        image_cv = result.plot()  #  YOLOv8 d√πng .plot() thay v√¨ .render()

    #  Ki·ªÉm tra n·∫øu c√≥ ph√°t hi·ªán ƒë√°m ch√°y
    fire_detected = any(cls == 0 for _, _, _, _, _, cls in result.boxes.data.tolist())  #  D√πng `result.boxes.data`

    # üñº Chuy·ªÉn ·∫£nh v·ªÅ ƒë·ªãnh d·∫°ng OpenCV ƒë·ªÉ hi·ªÉn th·ªã tr√™n web
    _, buffer = cv2.imencode('.jpg', image_cv)
    latest_image = buffer.tobytes()  #  C·∫≠p nh·∫≠t bi·∫øn `latest_image`
    if fire_detected:
        image_stream = BytesIO(latest_image)  # üî• L∆∞u ·∫£nh v√†o RAM
        send_telegram_message("üî• C·∫£nh b√°o! Ph√°t hi·ªán ƒë√°m ch√°y!", image_stream)

    return fire_detected

#  H√†m l∆∞u d·ªØ li·ªáu v√†o MySQL khi ph√°t hi·ªán ƒë√°m ch√°y
def save_fire_detection():
    """L∆∞u d·ªØ li·ªáu nh·∫≠n di·ªán ƒë√°m ch√°y v√†o MySQL"""
    try:
        # üìå T·∫°o k·∫øt n·ªëi MySQL m·ªõi m·ªói l·∫ßn truy v·∫•n
        db = mysql.connector.connect(
            host="localhost",
            user="root",
            password="123",
            database="fire_detection"
        )

        thoi_gian = datetime.now().strftime('%Y/%m/%d %H:%M:%S')
        noi_dung = "Nh·∫≠n di·ªán ƒë∆∞·ª£c ƒë√°m ch√°y"

        with db.cursor() as cursor:
            sql = "INSERT INTO fire_detection (thoi_gian, noi_dung) VALUES (%s, %s)"
            cursor.execute(sql, (thoi_gian, noi_dung))
            db.commit()  # üîÑ ƒê·∫£m b·∫£o l∆∞u thay ƒë·ªïi v√†o MySQL

        print(f"üî• ƒê√£ l∆∞u v√†o MySQL: {thoi_gian} - {noi_dung}")

        db.close()  # üîÑ ƒê√≥ng k·∫øt n·ªëi sau khi ho√†n th√†nh truy v·∫•n

    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói khi l∆∞u v√†o MySQL: {err}")


#  X·ª≠ l√Ω d·ªØ li·ªáu MQTT nh·∫≠n ƒë∆∞·ª£c
def on_message(client, userdata, msg):
    """Nh·∫≠n ·∫£nh t·ª´ MQTT, gh√©p ·∫£nh v√† ch·∫°y nh·∫≠n di·ªán"""
    global image_data, latest_image, total_parts

    message = msg.payload.decode()

    if message == "end":
        if total_parts is not None and len(image_data) == total_parts:
            try:
                #  Gh√©p c√°c ph·∫ßn ·∫£nh l·∫°i
                full_image_data = "".join(image_data[i] for i in sorted(image_data.keys()))
                full_image_data = fix_base64_padding(full_image_data)

                #  Gi·∫£i m√£ ·∫£nh
                image_bytes = base64.b64decode(full_image_data)
                np_arr = np.frombuffer(image_bytes, np.uint8)
                current_image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

                if current_image is not None:
                    print(" üî• ·∫¢nh nh·∫≠n th√†nh c√¥ng! Ch·∫°y nh·∫≠n di·ªán ƒë√°m ch√°y...")

                    #  Nh·∫≠n di·ªán ƒë√°m ch√°y
                    fire_detected = detect_fire(current_image)

                    #  N·∫øu ph√°t hi·ªán ch√°y, l∆∞u v√†o MySQL
                    if fire_detected:
                        save_fire_detection()
                        print(" Ph√°t hi·ªán ƒë√°m ch√°y! L∆∞u v√†o MySQL.")

            except Exception as e:
                print(f" L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")

        # üßπ X√≥a b·ªô nh·ªõ sau khi x·ª≠ l√Ω xong
        image_data.clear()
        total_parts = None

    else:
        try:
            #  Gh√©p t·ª´ng ph·∫ßn ·∫£nh
            index, part = message.split(":", 1)
            part_index, total = map(int, index.split("/"))
            total_parts = total
            image_data[part_index] = part

        except Exception as e:
            print(f" L·ªói khi x·ª≠ l√Ω ph·∫ßn ·∫£nh: {e}")
import requests

def send_telegram_message(message, image_bytes=None):
    """G·ª≠i th√¥ng b√°o v√† h√¨nh ·∫£nh qua Telegram tr·ª±c ti·∫øp t·ª´ b·ªô nh·ªõ"""
    try:
        # G·ª≠i tin nh·∫Øn
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message
        }
        requests.post(url, json=payload)

        # G·ª≠i ·∫£nh tr·ª±c ti·∫øp t·ª´ b·ªô nh·ªõ
        if image_bytes:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
            files = {'photo': ('fire_detected.jpg', image_bytes)}
            payload = {
                "chat_id": TELEGRAM_CHAT_ID,
                "caption": message
            }
            requests.post(url, files=files, data=payload)

        print("üì§ ƒê√£ g·ª≠i th√¥ng b√°o qua Telegram!")

    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {e}")


#  K·∫øt n·ªëi MQTT
client = mqtt.Client()
client.on_message = on_message
client.connect(MQTT_BROKER, MQTT_PORT, 60)
client.subscribe(MQTT_TOPIC)
client.loop_start()


#  Route Flask hi·ªÉn th·ªã giao di·ªán ch√≠nh
@app.route('/')
def index():
    """Hi·ªÉn th·ªã trang web ch√≠nh"""
    try:
        # üìå T·∫°o k·∫øt n·ªëi MySQL m·ªõi m·ªói l·∫ßn truy v·∫•n
        db = mysql.connector.connect(
            host="localhost",
            user="root",
            password="123",
            database="fire_detection"
        )

        with db.cursor() as cursor:
            cursor.execute("SELECT * FROM fire_detection ORDER BY stt DESC")
            data = cursor.fetchall()  # üîÑ ƒê·ªçc to√†n b·ªô d·ªØ li·ªáu

        db.close()  # üîÑ ƒê√≥ng k·∫øt n·ªëi sau khi ho√†n th√†nh truy v·∫•n

        return render_template('index.html', data=data)

    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ MySQL: {err}")
        return "L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu!"
def generate():
    """G·ª≠i ·∫£nh li√™n t·ª•c ƒë·∫øn tr√¨nh duy·ªát"""
    global latest_image
    while True:
        if latest_image:
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + latest_image + b'\r\n')
        else:
            print("‚ö†Ô∏è Ch∆∞a c√≥ ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã...")  # üìå Debug n·∫øu Flask kh√¥ng c√≥ ·∫£nh
        time.sleep(0.1)  # üìå Gi·∫£m t·∫£i CPU
#  Route Flask hi·ªÉn th·ªã ·∫£nh nh·∫≠n di·ªán
@app.route('/esp_feed')
def esp_feed():
    """Truy·ªÅn h√¨nh ·∫£nh ƒë√£ nh·∫≠n di·ªán l√™n web"""
    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')


# üåé API tr·∫£ v·ªÅ d·ªØ li·ªáu nh·∫≠n di·ªán ƒë√°m ch√°y d∆∞·ªõi d·∫°ng JSON
@app.route('/get_fire_detection')
def get_fire_detection():
    """API tr·∫£ v·ªÅ d·ªØ li·ªáu nh·∫≠n di·ªán ƒë√°m ch√°y"""
    try:
        # üìå T·∫°o k·∫øt n·ªëi MySQL m·ªõi m·ªói l·∫ßn truy v·∫•n
        db = mysql.connector.connect(
            host="localhost",
            user="root",
            password="123",
            database="fire_detection"
        )

        with db.cursor() as cursor:
            cursor.execute("SELECT * FROM fire_detection ORDER BY stt DESC")
            data = cursor.fetchall()  # üîÑ ƒê·ªçc to√†n b·ªô k·∫øt qu·∫£

        db.close()  # üîÑ ƒê√≥ng k·∫øt n·ªëi sau khi ho√†n th√†nh truy v·∫•n

        return jsonify(data)

    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ MySQL: {err}")
        return jsonify({"error": "L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu!"})
@app.route('/get_chart_data')
def get_chart_data():
    """API tr·∫£ v·ªÅ d·ªØ li·ªáu th·ªëng k√™ theo t·ª´ng gi·ªù cho t·∫•t c·∫£ c√°c ng√†y"""
    try:
        db = mysql.connector.connect(
            host="localhost",
            user="root",
            password="123",
            database="fire_detection"
        )

        with db.cursor() as cursor:
            # üìå L·∫•y d·ªØ li·ªáu theo t·ª´ng gi·ªù, kh√¥ng gi·ªõi h·∫°n ng√†y
            cursor.execute("""
                SELECT DATE_FORMAT(thoi_gian, '%Y-%m-%d %H:00:00') AS gio, COUNT(*) AS so_lan
                FROM fire_detection
                GROUP BY DATE_FORMAT(thoi_gian, '%Y-%m-%d %H:00:00')
                ORDER BY gio
            """)
            data = cursor.fetchall()

        db.close()

        if not data:
            return jsonify({"timestamps": [], "counts": []})  # üìå Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

        timestamps = [str(row[0]) for row in data]  # Th·ªùi gian theo gi·ªù (YYYY-MM-DD HH:00:00)
        counts = [row[1] for row in data]  # S·ªë l·∫ßn nh·∫≠n di·ªán m·ªói gi·ªù

        return jsonify({"timestamps": timestamps, "counts": counts})

    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu bi·ªÉu ƒë·ªì: {err}")
        return jsonify({"error": "L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu!"})
# üöÄ Ch·∫°y Flask Server
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True, threaded=True)
